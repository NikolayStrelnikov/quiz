from aiogram import Router, F
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from sqlalchemy.ext.asyncio import AsyncSession
import logging
from sqlalchemy import delete
from config import ADMIN_IDS
from database.queries import create_quiz
from services.quiz_parser import parse_quiz_text, QuizValidationError
from states import QuizStates
from keyboards.inline import get_main_menu_keyboard
from keyboards.reply import get_cancel_keyboard

router = Router()
logger = logging.getLogger(__name__)


@router.message(QuizStates.waiting_for_quiz)
async def process_quiz_text(
        message: Message,
        state: FSMContext,
        db: AsyncSession
) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–∞ –∫–≤–∏–∑–∞ —Å –ø–æ–ª–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π –∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏
    """
    try:
        # –ü–∞—Ä—Å–∏–Ω–≥ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
        quiz_data = parse_quiz_text(message.text)

        # –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–≤–∏–∑–∞
        async with db.begin():
            quiz = await create_quiz(
                db,
                title=quiz_data['title'],
                description=quiz_data['description'],
                content=message.text,  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç
                creator_id=message.from_user.id
            )

            await message.answer(
                f"‚úÖ –ö–≤–∏–∑ <b>{quiz.title}</b> —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n"
                f"–í–æ–ø—Ä–æ—Å–æ–≤: {len(quiz_data['questions'])}",
                reply_markup=get_main_menu_keyboard(),
                parse_mode="HTML"
            )
            await state.clear()

    except QuizValidationError as e:
        logger.warning(f"Validation error: {e}")
        await message.answer(
            f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –∫–≤–∏–∑–∞:\n{e}\n\n"
            "–ò—Å–ø—Ä–∞–≤—å—Ç–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç —Å–Ω–æ–≤–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /cancel",
            reply_markup=get_cancel_keyboard()
        )

    except Exception as e:
        logger.error(f"Unexpected error: {e}", exc_info=True)
        await message.answer(
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_main_menu_keyboard()
        )
        await state.clear()


@router.message(F.text.lower().in_(["–æ—Ç–º–µ–Ω–∞", "cancel"]))
async def cancel_operation(
        message: Message,
        state: FSMContext
) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏–π —Å –æ—á–∏—Å—Ç–∫–æ–π —Å–æ—Å—Ç–æ—è–Ω–∏—è
    """
    current_state = await state.get_state()
    if not current_state:
        return

    try:
        await state.clear()
        await message.answer(
            "‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
            reply_markup=get_main_menu_keyboard()
        )
    except Exception as e:
        logger.error(f"Error clearing state: {e}")
        await message.answer(
            "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –æ–ø–µ—Ä–∞—Ü–∏–∏",
            reply_markup=get_main_menu_keyboard()
        )


@router.message(F.text == "/cleanup")
async def cleanup_database(
        message: Message,
        db: AsyncSession
) -> None:
    """
    –ê–¥–º–∏–Ω—Å–∫–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        if message.from_user.id not in ADMIN_IDS:
            await message.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            return

        async with db.begin():
            # –ü—Ä–∏–º–µ—Ä –æ—á–∏—Å—Ç–∫–∏ - –∞–¥–∞–ø—Ç–∏—Ä—É–π—Ç–µ –ø–æ–¥ —Å–≤–æ–∏ –º–æ–¥–µ–ª–∏
            from database.models import Quiz, QuizResult
            await db.execute(delete(QuizResult))
            await db.execute(delete(Quiz))
            await message.answer("üóëÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—á–∏—â–µ–Ω–∞")

    except Exception as e:
        logger.error(f"Cleanup error: {e}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –ë–î")