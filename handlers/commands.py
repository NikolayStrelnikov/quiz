from aiogram import Dispatcher
from aiogram import Router, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery

from database.queries import get_or_create_user, get_active_quizzes
from keyboards.inline import get_quizzes_keyboard, get_main_menu_keyboard
from states import QuizStates

router = Router()


def register_commands(dp: Dispatcher):
    dp.include_router(router)


@router.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext):
    await state.clear()

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º/–ø–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    db = message.bot.get("db")
    user = get_or_create_user(
        db,
        telegram_id=message.from_user.id,
        username=message.from_user.username,
        full_name=message.from_user.full_name
    )

    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ QuizBot!\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ:\n"
        "- –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∫–≤–∏–∑ –∫–æ–º–∞–Ω–¥–æ–π /create\n"
        "- –ü—Ä–æ–π—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–≤–∏–∑—ã –∫–æ–º–∞–Ω–¥–æ–π /run",
        reply_markup=get_main_menu_keyboard()
    )


@router.message(Command("create"))
async def cmd_create(message: Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∫–≤–∏–∑–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ:\n\n"
        "–ù–∞–∑–≤–∞–Ω–∏–µ –∫–≤–∏–∑–∞: –ù–∞–∑–≤–∞–Ω–∏–µ\n"
        "–û–ø–∏—Å–∞–Ω–∏–µ: –û–ø–∏—Å–∞–Ω–∏–µ –∫–≤–∏–∑–∞\n\n"
        "–í–æ–ø—Ä–æ—Å 1: –¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞\n"
        "1. –í–∞—Ä–∏–∞–Ω—Ç 1\n"
        "2. –í–∞—Ä–∏–∞–Ω—Ç 2\n"
        "3. –í–∞—Ä–∏–∞–Ω—Ç 3\n"
        "4. –í–∞—Ä–∏–∞–Ω—Ç 4\n"
        "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: 1\n\n"
        "–í–æ–ø—Ä–æ—Å 2: –¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞\n"
        "... (–∏ —Ç–∞–∫ –¥–∞–ª–µ–µ)\n\n"
        "–ü—Ä–∏–º–µ—Ä –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –ø–æ –∫–æ–º–∞–Ω–¥–µ /template"
    )
    await state.set_state(QuizStates.waiting_for_quiz)


@router.message(Command("template"))
async def cmd_template(message: Message):
    await message.answer(
        "–ü—Ä–∏–º–µ—Ä –∫–≤–∏–∑–∞:\n\n"
        "–ù–∞–∑–≤–∞–Ω–∏–µ –∫–≤–∏–∑–∞: –û—Å–Ω–æ–≤—ã Python\n"
        "–û–ø–∏—Å–∞–Ω–∏–µ: –¢–µ—Å—Ç –ø–æ –±–∞–∑–æ–≤–æ–º—É —Å–∏–Ω—Ç–∞–∫—Å–∏—Å—É Python\n\n"
        "–í–æ–ø—Ä–æ—Å 1: –ö–∞–∫ –æ–±—ä—è–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫?\n"
        "1. list = {}\n"
        "2. list = []\n"
        "3. list = ()\n"
        "4. list = <>\n"
        "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: 2\n\n"
        "–í–æ–ø—Ä–æ—Å 2: –ö–∞–∫–æ–π –æ–ø–µ—Ä–∞—Ç–æ—Ä –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –≤–æ–∑–≤–µ–¥–µ–Ω–∏—è –≤ —Å—Ç–µ–ø–µ–Ω—å?\n"
        "1. ^\n"
        "2. **\n"
        "3. *\n"
        "4. !\n"
        "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: 2"
    )


@router.message(Command("run"))
async def cmd_run(message: Message, state: FSMContext):
    await state.clear()
    db = message.bot.get("db")
    quizzes = get_active_quizzes(db)

    if not quizzes:
        await message.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–≤–∏–∑–æ–≤ –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è.")
        return

    await message.answer(
        "üìã –í—ã–±–µ—Ä–∏—Ç–µ –∫–≤–∏–∑ –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è:",
        reply_markup=get_quizzes_keyboard(quizzes)
    )


@router.callback_query(F.data == "main_menu")
async def main_menu_callback(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text(
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=get_main_menu_keyboard()
    )
    await callback.answer()
