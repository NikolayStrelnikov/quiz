from aiogram import Router, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from sqlalchemy.ext.asyncio import AsyncSession

from database.queries import (
    get_or_create_user,
    get_active_quizzes,
    create_quiz
)
from keyboards.inline import (
    get_quizzes_keyboard,
    get_main_menu_keyboard
)
from services.quiz_parser import parse_quiz_text
from states import QuizStates

router = Router()


@router.message(Command("start"))
async def cmd_start(
        message: types.Message,
        db: AsyncSession,
        state: FSMContext
):
    await state.clear()

    # –°–æ–∑–¥–∞–µ–º/–ø–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –¥–∞–Ω–Ω—ã–µ
    user = await get_or_create_user(
        db,
        telegram_id=message.from_user.id,
        username=message.from_user.username,
        full_name=message.from_user.full_name
    )

    greeting_name = user.full_name or user.username or "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"

    await message.answer(
        f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ QuizBot, {greeting_name}!\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ:\n"
        "- –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∫–≤–∏–∑: /create\n"
        "- –ü—Ä–æ–π—Ç–∏ –∫–≤–∏–∑—ã: /run\n"
        "- –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–∏–º–µ—Ä: /template",
        reply_markup=get_main_menu_keyboard()
    )


@router.message(Command("create"))
async def cmd_create(
        message: types.Message,
        state: FSMContext
):
    await state.clear()
    await message.answer(
        "üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∫–≤–∏–∑–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ:\n\n"
        "–ù–∞–∑–≤–∞–Ω–∏–µ –∫–≤–∏–∑–∞: –ù–∞–∑–≤–∞–Ω–∏–µ\n"
        "–û–ø–∏—Å–∞–Ω–∏–µ: –û–ø–∏—Å–∞–Ω–∏–µ –∫–≤–∏–∑–∞\n\n"
        "–í–æ–ø—Ä–æ—Å 1: –¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞\n"
        "1. –í–∞—Ä–∏–∞–Ω—Ç 1\n"
        "2. –í–∞—Ä–∏–∞–Ω—Ç 2\n"
        "3. –í–∞—Ä–∏–∞–Ω—Ç 3\n"
        "4. –í–∞—Ä–∏–∞–Ω—Ç 4\n"
        "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: 1\n\n"
        "–ü—Ä–∏–º–µ—Ä: /template",
        parse_mode="Markdown"
    )
    await state.set_state(QuizStates.waiting_for_quiz)


@router.message(Command("template"))
async def cmd_template(message: types.Message):
    await message.answer(
        "```\n"
        "–ù–∞–∑–≤–∞–Ω–∏–µ –∫–≤–∏–∑–∞: –û—Å–Ω–æ–≤—ã Python\n"
        "–û–ø–∏—Å–∞–Ω–∏–µ: –¢–µ—Å—Ç –ø–æ –±–∞–∑–æ–≤–æ–º—É —Å–∏–Ω—Ç–∞–∫—Å–∏—Å—É Python\n\n"
        "–í–æ–ø—Ä–æ—Å 1: –ö–∞–∫ –æ–±—ä—è–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫?\n"
        "1. list = {}\n"
        "2. list = []\n"
        "3. list = ()\n"
        "4. list = <>\n"
        "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: 2\n\n"
        "–í–æ–ø—Ä–æ—Å 2: –ö–∞–∫–æ–π –æ–ø–µ—Ä–∞—Ç–æ—Ä –¥–ª—è –≤–æ–∑–≤–µ–¥–µ–Ω–∏—è –≤ —Å—Ç–µ–ø–µ–Ω—å?\n"
        "1. ^\n"
        "2. **\n"
        "3. *\n"
        "4. !\n"
        "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: 2\n"
        "```",
        parse_mode="Markdown"
    )


@router.message(Command("run"))
async def cmd_run(
        message: types.Message,
        state: FSMContext,
        db: AsyncSession
):
    await state.clear()

    quizzes = await get_active_quizzes(db)

    if not quizzes:
        await message.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–≤–∏–∑–æ–≤ –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è.")
        return

    await message.answer(
        "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–≤–∏–∑—ã:",
        reply_markup=get_quizzes_keyboard(quizzes)
    )


@router.message(QuizStates.waiting_for_quiz)
async def process_quiz_text(
        message: types.Message,
        db: AsyncSession,
        state: FSMContext
):
    try:
        quiz_data = parse_quiz_text(message.text)

        await create_quiz(
            db,
            title=quiz_data['title'],
            description=quiz_data['description'],
            content=message.text,
            creator_id=message.from_user.id
        )

        await message.answer(
            "‚úÖ –ö–≤–∏–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫!",
            reply_markup=get_main_menu_keyboard()
        )
        await state.clear()

    except ValueError as e:
        await message.answer(
            f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –∫–≤–∏–∑–∞:\n{e}\n\n"
            "–ò—Å–ø—Ä–∞–≤—å—Ç–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç —Å–Ω–æ–≤–∞ –∏–ª–∏ –ø–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –ø—Ä–∏–º–µ—Ä: /template"
        )
    except Exception as e:
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–≤–∏–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        await state.clear()
        raise e
